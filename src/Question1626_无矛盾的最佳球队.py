"""
1626. 无矛盾的最佳球队
假设你是球队的经理。对于即将到来的锦标赛，你想组合一支总体得分最高的球队。球队的得分是球队中所有球员的分数 总和 。

然而，球队中的矛盾会限制球员的发挥，所以必须选出一支 没有矛盾 的球队。如果一名年龄较小球员的分数 严格大于 一名年龄较大的球员，则存在矛盾。同龄球员之间不会发生矛盾。

给你两个列表 scores 和 ages，其中每组 scores[i] 和 ages[i] 表示第 i 名球员的分数和年龄。请你返回 所有可能的无矛盾球队中得分最高那支的分数 。



示例 1：

输入：scores = [1,3,5,10,15], ages = [1,2,3,4,5]
输出：34
解释：你可以选中所有球员。
示例 2：

输入：scores = [4,5,6,5], ages = [2,1,2,1]
输出：16
解释：最佳的选择是后 3 名球员。注意，你可以选中多个同龄球员。
示例 3：

输入：scores = [1,2,3,5], ages = [8,9,10,1]
输出：6
解释：最佳的选择是前 3 名球员。


提示：

1 <= scores.length, ages.length <= 1000
scores.length == ages.length
1 <= scores[i] <= 106
1 <= ages[i] <= 1000
"""
from typing import List


class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        result = sorted(zip(scores, ages), key=lambda x: (x[1], x[0]))
        scores = [x[0] for x in result]

        sums = scores.copy()
        for i in range(1, len(scores)):
            for j in range(i):
                if scores[j] <= scores[i]:
                    sums[i] = max(sums[i], sums[j] + scores[i])

        return max(sums)


if __name__ == '__main__':
    s = Solution()
    print(s.bestTeamScore(
        [674, 918, 473, 933, 161, 82, 874, 131, 367, 941, 799, 488, 222, 778, 352, 411, 585, 833, 310, 988, 807, 230,
         251, 187, 222, 125, 112, 273, 978, 109, 14, 485, 955, 761, 922, 658, 144, 42, 124, 893, 181, 911, 567, 587, 28,
         562, 666, 871, 275, 587, 437, 826, 502, 354, 704, 979, 868, 520, 661, 163, 805, 250],
        [59, 30, 1, 28, 36, 95, 30, 5, 61, 23, 78, 6, 47, 14, 26, 47, 88, 98, 23, 92, 9, 77, 30, 39, 4, 59, 51, 64, 73,
         1, 58, 23, 63, 70, 44, 51, 62, 92, 70, 92, 66, 5, 80, 36, 9, 95, 100, 3, 11, 90, 71, 57, 78, 45, 4, 66, 90, 45,
         26, 79, 1, 80]))
